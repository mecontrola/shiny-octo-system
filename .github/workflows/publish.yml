name: Create Release

on:
  push:
    tags:
      - 'v*'

jobs:
  release:
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
    - name: Extract Tag version
      id: app-version
      shell: bash
      run: echo "::set-output name=version::${GITHUB_REF#refs/tags/v}"

    - name: Create Release v${{ steps.app-version.outputs.version }}
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: v${{ steps.app-version.outputs.version  }}
        draft: false
        prerelease: false

    outputs:
      app-version: ${{ steps.app-version.outputs.version }}
      upload_url: ${{ steps.create_release.outputs.upload_url }}

  publish:
    needs: release
    runs-on: windows-latest
    strategy:
      matrix:
        dotnet-version: [ '6.0.x' ]
        build-configuration: [ 'Release' ]
        build-architecture: [ 'x86', 'x64' ]
    env:
      app-version: ${{ needs.release.outputs.app-version }}
      app-package-name: 'AHM Report'
      path-publish: './Stefanini.ViaReport/bin/Release/net6.0-windows/publish'
      upload_url: ${{ needs.release.outputs.upload_url }}
    #  certificate-name: 'AppCertificate.pfx'
    steps:
    - name: Checkout v${{ env.app-version }}
      uses: actions/checkout@master
      
    - name: Setup .NET ${{ matrix.dotnet-version }}
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}

    - name: Publish Project ${{ matrix.build-architecture }}
      run: dotnet publish --nologo --self-contained -r win-${{ matrix.build-architecture }} -p:PublishProfile=Publish_Win-${{ matrix.build-architecture }} -p:DebugType=None -p:DebugSymbols=false -p:Optimize=true -p:AssemblyVersion=${{ env.app-version }} -p:FileVersion=${{ env.app-version }}

    #- name: Decode the Pfx
    #  run: |
    #    $pfx_cert_byte = [System.Convert]::FromBase64String("${{ secrets.BASE64_ENCODED_PFX }}")
    #    $currentDirectory = Get-Location
    #    $certificatePath = Join-Path -Path $currentDirectory -ChildPath ${{ env.path-publish }} -AdditionalChildPath ${{ env.certificate-name }}
    #    [IO.File]::WriteAllBytes("$certificatePath", $pfx_cert_byte)

    #- name: Sign the app with Pfx
    #  run: |
    #    $signtool = "C:/Program Files (x86)/Windows Kits/10/bin/10.0.17763.0/x86/signtool.exe"
    #    
    #    & $signtool sign /f '${{ env.path-publish }}\${{ env.certificate-name }}' /p ${{ secrets.CERTIFICATE_PASSWORD }} /fd SHA256 '${{ env.path-publish }}/AHM Report.exe'
      
    #- name: Remove the .pfx
    #  run: Remove-Item -path '${{ env.path-publish }}\${{ env.certificate-name }}

    - name: Zip Project ${{ matrix.build-architecture }}
      run: 7z a -tzip '${{ env.app-package-name }}-v${{ env.app-version }}_${{ matrix.build-architecture }}.zip' -r '${{ env.path-publish }}\*'

    - name: Upload Release ${{ matrix.build-architecture }}
      id: upload-release-asset 
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
      with:
        upload_url: ${{ env.upload_url }}
        asset_path: './${{ env.app-package-name }}-v${{ env.app-version }}_${{ matrix.build-architecture }}.zip'
        asset_name: '${{ env.app-package-name }}-v${{ env.app-version }}_${{ matrix.build-architecture }}.zip'
        asset_content_type: application/octet-stream